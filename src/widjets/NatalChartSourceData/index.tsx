import { FC } from 'react'

import { Card, Label, Row, Icon, Divider } from './index.linaria'
import { useAppSelector } from '@/store'

interface ChartSourceDataProps {
  chartId: string
}

export const NatalChartSourceData: FC<ChartSourceDataProps> = ({ chartId }) => {
  const sourceData = useAppSelector((store) => store.natalDecoding.chartsById[chartId].sourceValue)

  if (!sourceData) return null

  const { datetime, timezone, latitude, longitude, place, jd } = sourceData

  const utcDate = new Date(datetime)
  const timezoneOffsetMs = timezone * 60 * 60 * 1000
  const localDate = new Date(utcDate.getTime() + timezoneOffsetMs)

  const toStr = (d: Date) => {
    const dd = String(d.getUTCDate()).padStart(2, '0')
    const mm = String(d.getUTCMonth() + 1).padStart(2, '0')
    const yyyy = d.getUTCFullYear()
    const hh = String(d.getUTCHours()).padStart(2, '0')
    const min = String(d.getUTCMinutes()).padStart(2, '0')

    return `${dd}.${mm}.${yyyy} ${hh}:${min}`
  }

  return (
    <Card>
      <Row>
        <Icon>üïì</Icon>
        <Label>–ú–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</Label>
        {toStr(localDate)} (GMT{timezone >= 0 ? `+${timezone}` : timezone})
      </Row>

      <Row>
        <Icon>üïò</Icon>
        <Label>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (UTC):</Label>
        {toStr(utcDate)}
      </Row>

      <Row>
        <Icon>üåê</Icon>
        <Label>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</Label>
        GMT{timezone >= 0 ? `+${timezone}` : timezone}
      </Row>

      <Divider />

      <Row>
        <Icon>üìç</Icon>
        <Label>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</Label>
        —à–∏—Ä–æ—Ç–∞ {latitude}¬∞, –¥–æ–ª–≥–æ—Ç–∞ {longitude}¬∞
      </Row>

      <Row>
        <Icon>üåç</Icon>
        <Label>–ú–µ—Å—Ç–æ:</Label>
        {place}
      </Row>

      <Divider />

      <Row>
        <Icon>üìÖ</Icon>
        <Label>–Æ–ª–∏–∞–Ω—Å–∫–∞—è –¥–∞—Ç–∞ (JD):</Label>
        {jd}
      </Row>
    </Card>
  )
}
