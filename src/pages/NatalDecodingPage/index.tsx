import { useEffect, useMemo } from 'react'

import { useDispatch } from 'react-redux'
import { useNavigate, useLocation, useSearchParams } from 'react-router-dom'

import { HeaderContainer, Layout, PageTitle, SectionTitle } from './index.linaria'
import { DEFAULT_NATAL_CHART_ID } from '@/entities/astro-charts/constants'
import {
  DEMO_NATAL_CALCULATION,
  DEMO_NATAL_SOURCE_VALUE,
} from '@/entities/astro-charts/data/demo-calculations'
import { IFullNatal–°alculations } from '@/entities/astro-charts/types/astro-charts.types'
import { Header } from '@/shared/components/Header'
import { ROUTER_PATHES } from '@/shared/constants/router-paths'
import { useAppSelector, store } from '@/store'
import { addNatalChart, removeNatalChart } from '@/store/slices/natal-decoding'
import { NatalCanvasPanel } from '@/widjets/NatalCanvasPanel'
import { NatalDictionaryPanelTab } from '@/widjets/NatalDictionaryPanelTab'
import { NatalSummaryPanelTab } from '@/widjets/NatalSummaryPanelTab'
import { NatalChartSourceData } from '@/widjets/NatalChartSourceData'

export const NatalDecodingPage = () => {
  const location = useLocation()
  const [searchParams] = useSearchParams()
  const navigate = useNavigate()
  const dispatch = useDispatch()

  const rawChartId = useMemo(() => searchParams.get('chartId'), [location]) // üî• —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ä—É—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ URL
  const chartId = rawChartId ?? DEFAULT_NATAL_CHART_ID

  const chartValue = useAppSelector((store) => store.natalDecoding.chartsById[chartId])

  useEffect(() => {
    const isDefault = rawChartId === DEFAULT_NATAL_CHART_ID
    if (!chartValue) {
      // –ü–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –Ω–∞ –¥–µ—Ñ–æ–ª—Ç, –µ—Å–ª–∏ id –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
      if (!isDefault) {
        navigate(`${ROUTER_PATHES.NATAL_DECODING_PATH}?chartId=${DEFAULT_NATAL_CHART_ID}`, {
          replace: true,
        })
      }

      const alreadyExists = store.getState().natalDecoding.chartsById[DEFAULT_NATAL_CHART_ID]
      if (!alreadyExists) {
        dispatch(
          addNatalChart({
            id: DEFAULT_NATAL_CHART_ID,
            sourceValue: DEMO_NATAL_SOURCE_VALUE,
            calculation: DEMO_NATAL_CALCULATION as unknown as IFullNatal–°alculations,
          }),
        )
      }
    }
    // —Ç—É—Ç –Ω—É–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–¥–∞–ª—è–µ—Ç—Å—è, –Ω–æ –ø–æ—Ç–æ–º –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è

    return () => {
      /* const wasDefault = chartId === DEFAULT_NATAL_CHART_ID
      if (wasDefault) {
        dispatch(removeNatalChart(DEFAULT_NATAL_CHART_ID))
      } */
    }
  }, [])

  return (
    <Layout>
      <HeaderContainer>
        <Header
          text="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"
          showBackButton
          onClick={() => navigate(ROUTER_PATHES.CALCULATOR_PATH)}
        />
      </HeaderContainer>
      {chartValue && (
        <>
          <PageTitle>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã{' '}üí´</PageTitle>

          <SectionTitle>–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</SectionTitle>
          <div style={{ marginBottom: '30px' }}>
            <NatalChartSourceData chartId={chartId} />
          </div>

          <SectionTitle>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞</SectionTitle>
          <div style={{ marginBottom: '30px' }}>
            <NatalCanvasPanel chartId={chartId} />
          </div>

          <SectionTitle>–û—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã</SectionTitle>
          <NatalSummaryPanelTab chartId={chartId} />

          <SectionTitle>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏</SectionTitle>
          <NatalDictionaryPanelTab chartId={chartId} />
        </>
      )}
    </Layout>
  )
}
