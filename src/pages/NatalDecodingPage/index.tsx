import { useCallback, useEffect, useMemo, useState } from 'react'

import { nanoid } from 'nanoid'
import { useDispatch } from 'react-redux'
import { useNavigate, useSearchParams } from 'react-router-dom'

import { Layout, layoutLoading, WidjetsWrapper } from './index.linaria'
import { PageSkeleton } from './ui/PageSkeleton'
import { DEFAULT_NATAL_CHART_ID } from '@/entities/astro-charts/constants'
import { IBasicCalculatorRequest } from '@/entities/astro-charts/types/calculator-request.types'
import { SharedButton } from '@/features/SharedButton'
import InfoIcon from '@/shared/assets/icons/info-circle.svg?react'
import { SHARED_COLORS_VARIABLES } from '@/shared/assets/styles/colors'
import { PageContentWrapper } from '@/shared/assets/styles/pages.linaria'
import { H1, H2 } from '@/shared/assets/styles/titles.linaria'
import { HeaderBackButton } from '@/shared/components/HeaderBackButton'
import { AlertModal } from '@/shared/components/Modal'
import { PageHeader } from '@/shared/components/PageHeader'
import { SeoHelmet } from '@/shared/components/SeoHelmet'
import { ROUTER_PATHES } from '@/shared/constants/router-paths'
import { decodeRequestFromQuery, encodeRequestToQuery } from '@/shared/helpers/shareRequest'
import { useAppSelector } from '@/store'
import { usePostCalculateNatalMutation } from '@/store/api/astro-calculate.api'
import { addNatalChart } from '@/store/slices/natal-decoding'
import { NatalCanvasPanel } from '@/widjets/NatalCanvasPanel'
import { NatalChartSourceData } from '@/widjets/NatalChartSourceData'
import { NatalDictionaryPanelTab } from '@/widjets/NatalDictionaryPanelTab'
import { NatalSummaryPanelTab } from '@/widjets/NatalSummaryPanelTab'

export const NatalDecodingPage = () => {
  const [searchParams] = useSearchParams()
  const navigate = useNavigate()
  const dispatch = useDispatch()
  const [postNatalChart] = usePostCalculateNatalMutation()

  // --- —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫ ---
  const [isLoading, setIsLoading] = useState(false)
  const [serverError, setServerError] = useState<string | null>(null)
  const [dataError, setDataError] = useState<string | null>(null)

  // --- –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL (—Ä–µ–∞–≥–∏—Ä—É—é—Ç –Ω–∞ —Ä—É—á–Ω—É—é –ø—Ä–∞–≤–∫—É) ---
  const rawChartId = useMemo(() => searchParams.get('chartId'), [searchParams])
  const paramsChart = useMemo(() => searchParams.get('r'), [searchParams])
  const chartId = rawChartId ?? DEFAULT_NATAL_CHART_ID

  const chartValue = useAppSelector((store) => store.natalDecoding.chartsById[chartId])

  /** –µ–¥–∏–Ω—ã–π –≤—ã–∑–æ–≤ —Ä–∞—Å—á—ë—Ç–∞ + –∑–∞–ø–∏—Å—å –≤ —Å—Ç–æ—Ä + –Ω–∞–≤–∏–≥–∞—Ü–∏—è */
  const postNatal = useCallback(
    async (request: IBasicCalculatorRequest) => {
      setServerError(null)
      setIsLoading(true)
      try {
        const r = encodeRequestToQuery(request)
        const response = await postNatalChart(request).unwrap()

        if (response?.success === true && response.data) {
          const { sourceData, result } = response.data
          const newChartId = nanoid()

          dispatch(
            addNatalChart({
              id: newChartId,
              sourceValue: sourceData,
              calculation: result,
            }),
          )

          navigate(`${ROUTER_PATHES.NATAL_DECODING_PATH}?chartId=${newChartId}&r=${r}`, { replace: true })
        } else {
          throw new Error('SERVER_RESPONSE_INVALID')
        }
      } catch {
        // —Å–µ—Ä–≤–µ—Ä–Ω–∞—è/—Å–µ—Ç–µ–≤–æ–∞—è –æ—à–∏–±–∫–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä—É—é –º–æ–¥–∞–ª–∫—É
        setServerError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É.')
      } finally {
        setIsLoading(false)
      }
    },
    [dispatch, navigate, postNatalChart],
  )

  /** —Ä–µ—Ç—Ä–∞–π: –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —Å —Ç–µ–º, —á—Ç–æ –≤ URL (–µ—Å–ª–∏ –æ–∫), –∏–Ω–∞—á–µ —É—Ö–æ–¥–∏–º –∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É */
  const handleRetry = useCallback(() => {
    const fromUrl = decodeRequestFromQuery<IBasicCalculatorRequest>(paramsChart)
    if (fromUrl) {
      void postNatal(fromUrl)
    } else {
      navigate(ROUTER_PATHES.CALCULATOR_PATH)
    }
  }, [navigate, paramsChart, postNatal])

  /** –ø–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É */
  const goToCalculator = useCallback(() => {
    navigate(ROUTER_PATHES.CALCULATOR_PATH)
  }, [navigate])

  // --- –ø–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ URL ---
  useEffect(() => {
    if (chartValue) return // —É–∂–µ –µ—Å—Ç—å —Ä–∞—Å—á—ë—Ç ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    const fromUrl = decodeRequestFromQuery<IBasicCalculatorRequest>(paramsChart)

    if (!fromUrl) {
      setDataError('–†–∞—Å—Å—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.')

      return
    }

    // –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á—ë—Ç
    void postNatal(fromUrl)
  }, [chartValue, paramsChart, postNatal])

  return (
    <Layout className={isLoading || serverError ? layoutLoading : ''}>
      <SeoHelmet
        title="–í–∞—à–∞ –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –∏ –≥–æ—Ä–æ—Å–∫–æ–ø –æ–Ω–ª–∞–π–Ω ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞"
        description="–í–∞—à–∞ –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –∏ –≥–æ—Ä–æ—Å–∫–æ–ø –æ–Ω–ª–∞–π–Ω –≤ ASTRODOC. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã: –ø–æ–ª–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–ª–∞–Ω–µ—Ç, –¥–æ–º–æ–≤, –∞—Å–ø–µ–∫—Ç–æ–≤ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π. –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã."
      />
      <PageHeader>
        <>
          <HeaderBackButton />
          <SharedButton
            shareUrl={window.location.href}
            title="–ú–æ—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞"
            messageText="‚ú® –ú–æ—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞"
            buttonText="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–∞—Ä—Ç–æ–π"
            description="–ù–∞–∂–º–∏, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–∑—å—è–º"
          />
        </>
      </PageHeader>

      <PageContentWrapper>
        <H1>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π&nbsp;–∫–∞—Ä—Ç—ã&nbsp;üí´</H1>
        {/* –°–∫–µ–ª–µ—Ç–æ–Ω, –ø–æ–∫–∞ –≥—Ä—É–∑–∏–º—Å—è –∏–ª–∏ –ø–æ–∫–∞ –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ chartValue */}
        {(!chartValue || isLoading) && <PageSkeleton />}

        {/* –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ ‚Äî —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏/–æ—à–∏–±–æ–∫ –∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ */}
        {!isLoading && !serverError && !dataError && chartValue && (
          <WidjetsWrapper>
            <section>
              <H2>–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</H2>
              <NatalChartSourceData chartId={chartId} />
            </section>

            <section>
              <H2>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞</H2>
              <NatalCanvasPanel chartId={chartId} />
            </section>

            <section>
              <H2>–û—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã</H2>
              <NatalSummaryPanelTab chartId={chartId} />
            </section>

            <section>
              <H2>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏</H2>
              <NatalDictionaryPanelTab chartId={chartId} />
            </section>
          </WidjetsWrapper>
        )}
      </PageContentWrapper>

      {/* –ú–æ–¥–∞–ª–∫–∞ ‚Ññ1: –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ‚Äî 2 –∫–Ω–æ–ø–∫–∏ (–ø–æ–≤—Ç–æ—Ä–∏—Ç—å / –≤–µ—Ä–Ω—É—Ç—å—Å—è) */}
      <AlertModal
        open={!isLoading && serverError ? true : false}
        showExitCross={false}
        title={'–£–ø—Å...'}
        subtitle={
          <>
            –ü–æ—Ö–æ–∂–µ —á—Ç–æ —Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å. <br /> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É.
          </>
        }
        primaryButtonText={'–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'}
        onPrimaryClick={handleRetry}
        secondaryButtonText={'–í–µ—Ä–Ω—É—Ç—å—Å—è'}
        onClose={goToCalculator}
        icon={<InfoIcon stroke={SHARED_COLORS_VARIABLES.ERROR_COLOR} />}
      />

      <AlertModal
        open={!isLoading && !serverError && dataError ? true : false}
        showExitCross={false}
        title={'–î–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã'}
        subtitle={
          <>
            {dataError}
            <br /> –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É.
          </>
        }
        secondaryButtonText={'–í–µ—Ä–Ω—É—Ç—å—Å—è'}
        onSecondaryClick={goToCalculator}
        onClose={goToCalculator}
        icon={<InfoIcon stroke={SHARED_COLORS_VARIABLES.ERROR_COLOR} />}
      />
    </Layout>
  )
}
